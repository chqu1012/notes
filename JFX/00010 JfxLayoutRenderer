import de.dc.javafx.model.jfx.JfxAnchorData;
import de.dc.javafx.model.jfx.JfxAnchorPane;
import de.dc.javafx.model.jfx.JfxGridPane;
import de.dc.javafx.model.jfx.JfxHbox;
import de.dc.javafx.model.jfx.JfxHboxData;
import de.dc.javafx.model.jfx.JfxLayout;
import de.dc.javafx.model.jfx.JfxLayoutData;
import de.dc.javafx.model.jfx.JfxNode;
import de.dc.javafx.model.jfx.JfxProject;
import de.dc.javafx.model.jfx.JfxVbox;
import de.dc.javafx.model.jfx.JfxVboxData;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.Pane;
import javafx.scene.layout.Priority;
import javafx.scene.layout.Region;
import javafx.scene.layout.VBox;

public class JfxLayoutRenderer extends JfxControllerRenderer {

	@Override
	public Node caseJfxProject(JfxProject i) {
		JfxNode layout = i.getLayout();
		return doSwitch(layout);
	}
	
	@Override
	public Node caseJfxVbox(JfxVbox i) {
		VBox parent = new VBox();
		parent.setSpacing(i.getSpacing());
		setStylePreferences(i, parent);
		setBoxPreferences(i, parent);
		regristrateNode(i, parent);
		return parent;
	}

	@Override
	public Node caseJfxHbox(JfxHbox i) {
		HBox parent = new HBox();
		parent.setSpacing(i.getSpacing());
		setStylePreferences(i, parent);
		setBoxPreferences(i, parent);
		regristrateNode(i, parent);
		return parent;
	}

	@Override
	public Node caseJfxGridPane(JfxGridPane i) {
		GridPane parent = new GridPane();
		parent.setHgap(i.getHGap());
		parent.setVgap(i.getVGap());
		setStylePreferences(i, parent);
		setBoxPreferences(i, parent);
		regristrateNode(i, parent);
		return parent;
	}

	@Override
	public Node caseJfxAnchorPane(JfxAnchorPane i) {
		AnchorPane parent = new AnchorPane();
		setStylePreferences(i, parent);
		setBoxPreferences(i, parent);
		i.getChildren().forEach(node -> setLayoutData(node, doSwitch(node)));
		regristrateNode(i, parent);
		return parent;
	}
	
	protected void setStylePreferences(JfxNode i, Region parent) {
		parent.setStyle(i.getStyle());
	}

	protected void setSize(JfxNode node, Region jfxNode){
		if (node.getHeight()>0)
			jfxNode.setPrefHeight(node.getHeight());
		if (node.getWidth()>0)
			jfxNode.setPrefWidth(node.getWidth());
	}

	protected void setLayoutData(JfxNode node, Node jfxNode) {
		JfxLayoutData layoutData = node.getLayoutData();
		if (layoutData instanceof JfxAnchorData) {
			setJfxAnchorData(jfxNode, layoutData);
		}else if (layoutData instanceof JfxHboxData) {
			setJfxHboxData(jfxNode, layoutData);
		}else if (layoutData instanceof JfxVboxData) {
			setJfxVboxData(jfxNode, layoutData);
		}
	}

	private void setJfxVboxData(Node jfxNode, JfxLayoutData layoutData) {
		JfxVboxData data = (JfxVboxData) layoutData;
		VBox.setVgrow(jfxNode, Priority.valueOf(data.getVGrow().getName()));		
	}

	protected void setJfxHboxData(Node jfxNode, JfxLayoutData layoutData) {
		JfxHboxData data = (JfxHboxData) layoutData;
		HBox.setHgrow(jfxNode, Priority.valueOf(data.getHGrow().getName()));
		if (data.getMargin()!=null) {
			double left = data.getMargin().getLeft();
			double right = data.getMargin().getRight();
			double top = data.getMargin().getTop();
			double bottom = data.getMargin().getBottom();
			HBox.setMargin(jfxNode,new Insets(top,right,bottom,left));
		}

	}

	protected void setJfxAnchorData(Node jfxNode, JfxLayoutData layoutData) {
		JfxAnchorData data = (JfxAnchorData) layoutData;
		if (data != null) {
			if (data.getLeft() > -1) {
				AnchorPane.setLeftAnchor(jfxNode, data.getLeft());
			}
			if (data.getRight() > -1) {
				AnchorPane.setRightAnchor(jfxNode, data.getRight());
			}
			if (data.getTop() > -1) {
				AnchorPane.setTopAnchor(jfxNode, data.getTop());
			}
			if (data.getBottom() > -1) {
				AnchorPane.setBottomAnchor(jfxNode, data.getBottom());
			}
		}
	}

	protected void setBoxPreferences(JfxLayout i, Pane parent) {
		setSize(i, parent);
		i.getChildren().forEach(node -> parent.getChildren().add(doSwitch(node)));
	}
}
