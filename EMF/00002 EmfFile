import java.io.IOException;
import java.util.Collections;
import java.util.Map;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EcoreFactory;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;

public class JfxProjectFile<T> {

	public static final String EXTENSION = "";
	
	public JfxProjectFile() {
		 // Initialize the model
		{Model}Package.eINSTANCE.eClass();
		
		// Retrieve the default factory singleton
		{Model}Factory factory = {Model}Factory.eINSTANCE;
	}
	
    @SuppressWarnings("unchecked")
	public T load(String filePath) {
        URI uri = URI.createFileURI(filePath);
        
        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> m = reg.getExtensionToFactoryMap();
        m.put(EXTENSION, new XMIResourceFactoryImpl());
        ResourceSet resSet = new ResourceSetImpl();
        Resource resource = resSet.getResource(uri, true);
		T model = (T) resource.getContents().get(0);
        return model;
    }

    public void write(T model, String path) {
        URI uri = URI.createFileURI(path);

        Resource.Factory.Registry reg = Resource.Factory.Registry.INSTANCE;
        Map<String, Object> m = reg.getExtensionToFactoryMap();
        m.put(EXTENSION, new XMIResourceFactoryImpl());

        ResourceSet resSet = new ResourceSetImpl();
        Resource resource = resSet.createResource(uri);
        resource.getContents().add((EObject) model);

        try {
            resource.save(Collections.EMPTY_MAP);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
